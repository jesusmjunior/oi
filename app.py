import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import os
import base64
from io import BytesIO

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Dashboard de Subregistro Civil - COGEX-MA",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Fun√ß√£o para importar os dados reais dos arquivos Excel
@st.cache_data
def carregar_dados():
    try:
        # Importando dados sobre munic√≠pios
        df_municipios = pd.read_excel("IBGE_Subregistro_Posicao_Municipios.xls")
        
        # Importando dados regionais/nacionais
        df_regioes = pd.read_excel("IBGE_Subregistro_Posicao_BR_NE.xls")
        
        # Exibir informa√ß√µes sobre os dataframes carregados
        print("DataFrame Munic√≠pios:")
        print(df_municipios.info())
        print("\nDataFrame Regi√µes:")
        print(df_regioes.info())
        
        return df_municipios, df_regioes
    
    except Exception as e:
        st.error(f"Erro ao carregar os arquivos: {e}")
        
        # Criar dados simulados para demonstra√ß√£o se houver erro
        # Dados simulados para munic√≠pios do Maranh√£o
        municipios = [
            'S√£o Lu√≠s', 'Imperatriz', 'S√£o Jos√© de Ribamar', 'Timon', 
            'Caxias', 'Cod√≥', 'Bacabeira', 'Raposa', 'Pa√ßo do Lumiar',
            'Balsas', 'Santa In√™s', 'A√ßail√¢ndia', 'Buriticupu', 'Barra do Corda'
        ]
        
        dados_simulados_municipios = {
            'Munic√≠pio': municipios,
            'UF': ['MA'] * len(municipios),
            'Popula√ß√£o_2023': [
                1115932, 260526, 177687, 170222, 164880, 123116, 
                16014, 30761, 148427, 95929, 89489, 113121, 72380, 88492
            ],
            'Nascidos_Vivos_2023': [
                16852, 3687, 2654, 2557, 2463, 1840, 
                241, 462, 2231, 1447, 1354, 1694, 1092, 1320
            ],
            'Registros_Civil_2023': [
                16431, 3540, 2458, 2442, 2280, 1710, 
                218, 423, 2113, 1374, 1259, 1593, 984, 1208
            ],
            'Taxa_Subregistro_2023': [
                2.5, 4.0, 7.4, 4.5, 7.4, 7.1, 
                9.5, 8.4, 5.3, 5.0, 7.0, 6.0, 9.9, 8.5
            ],
            'Ano': [2023] * len(municipios)
        }
        
        # Dados simulados regionais
        dados_simulados_regioes = {
            'Regi√£o': ['Brasil', 'Nordeste', 'Norte', 'Sudeste', 'Sul', 'Centro-Oeste', 'Maranh√£o'],
            'Popula√ß√£o_2023': [203062512, 57667842, 18430980, 89012756, 30192370, 16758564, 7153262],
            'Nascidos_Vivos_2023': [2805901, 868204, 322542, 1096275, 339958, 178922, 107537],
            'Registros_Civil_2023': [2749783, 834676, 308528, 1078831, 336559, 176190, 102160],
            'Taxa_Subregistro_2023': [2.0, 3.8, 4.3, 1.6, 1.0, 1.5, 5.0],
            'Ano': [2023] * 7
        }
        
        st.warning("Usando dados simulados para demonstra√ß√£o. Por favor, verifique os arquivos Excel.")
        
        return pd.DataFrame(dados_simulados_municipios), pd.DataFrame(dados_simulados_regioes)

# Fun√ß√£o para processar os dados
def processar_dados(df_municipios, df_regioes):
    # Processar dados dos munic√≠pios
    # Adapte esta fun√ß√£o conforme a estrutura real dos seus dados
    
    # Verificar se a coluna de taxa de subregistro existe ou precisa ser calculada
    if 'Taxa_Subregistro' not in df_municipios.columns:
        # Verificar se temos colunas de nascidos vivos e registros civis
        colunas = df_municipios.columns
        col_nascidos = [col for col in colunas if 'nasc' in col.lower() or 'vivo' in col.lower()]
        col_registros = [col for col in colunas if 'regis' in col.lower() or 'civil' in col.lower()]
        
        if col_nascidos and col_registros:
            df_municipios['Taxa_Subregistro'] = 100 * (1 - df_municipios[col_registros[0]] / df_municipios[col_nascidos[0]])
    
    # Processar dados das regi√µes
    # Adapte esta fun√ß√£o conforme a estrutura real dos seus dados
    
    # Verificar se a coluna de taxa de subregistro existe ou precisa ser calculada
    if 'Taxa_Subregistro' not in df_regioes.columns:
        # Verificar se temos colunas de nascidos vivos e registros civis
        colunas = df_regioes.columns
        col_nascidos = [col for col in colunas if 'nasc' in col.lower() or 'vivo' in col.lower()]
        col_registros = [col for col in colunas if 'regis' in col.lower() or 'civil' in col.lower()]
        
        if col_nascidos and col_registros:
            df_regioes['Taxa_Subregistro'] = 100 * (1 - df_regioes[col_registros[0]] / df_regioes[col_nascidos[0]])
    
    return df_municipios, df_regioes

# Fun√ß√£o para exportar dados como CSV
def exportar_csv(df):
    csv = df.to_csv(index=False)
    b64 = base64.b64encode(csv.encode()).decode()
    href = f'<a href="data:file/csv;base64,{b64}" download="dados_subregistro.csv">Download CSV</a>'
    return href

# Fun√ß√£o para criar um gr√°fico de barras para taxa de subregistro por regi√£o
def grafico_subregistro_regiao(df_regioes, ano_selecionado=None):
    if ano_selecionado:
        df_plot = df_regioes[df_regioes['Ano'] == ano_selecionado].copy()
    else:
        # Se n√£o tiver o ano selecionado, usa o ano mais recente
        ano_max = df_regioes['Ano'].max()
        df_plot = df_regioes[df_regioes['Ano'] == ano_max].copy()
    
    # Ordenar por taxa de subregistro decrescente
    df_plot = df_plot.sort_values('Taxa_Subregistro', ascending=False)
    
    # Criar o gr√°fico
    fig = px.bar(
        df_plot,
        x='Regi√£o',
        y='Taxa_Subregistro',
        color='Taxa_Subregistro',
        color_continuous_scale='Reds',
        text_auto='.1f',
        title=f'Taxa de Subregistro por Regi√£o - {df_plot["Ano"].iloc[0]}'
    )
    
    fig.update_layout(
        xaxis_title="",
        yaxis_title="Taxa de Subregistro (%)",
        coloraxis_showscale=False,
        height=500
    )
    
    return fig

# Fun√ß√£o para criar um gr√°fico de barras para taxa de subregistro por munic√≠pio
def grafico_subregistro_municipio(df_municipios, ano_selecionado=None, municipios_selecionados=None):
    if ano_selecionado:
        df_plot = df_municipios[df_municipios['Ano'] == ano_selecionado].copy()
    else:
        # Se n√£o tiver o ano selecionado, usa o ano mais recente
        ano_max = df_municipios['Ano'].max()
        df_plot = df_municipios[df_municipios['Ano'] == ano_max].copy()
    
    # Filtrar por munic√≠pios selecionados, se houver
    if municipios_selecionados:
        df_plot = df_plot[df_plot['Munic√≠pio'].isin(municipios_selecionados)]
    
    # Ordenar por taxa de subregistro decrescente
    df_plot = df_plot.sort_values('Taxa_Subregistro', ascending=False)
    
    # Se houver muitos munic√≠pios, limitar a exibi√ß√£o aos 15 primeiros
    if len(df_plot) > 15 and not municipios_selecionados:
        df_plot = df_plot.head(15)
    
    # Criar o gr√°fico
    fig = px.bar(
        df_plot,
        x='Munic√≠pio',
        y='Taxa_Subregistro',
        color='Taxa_Subregistro',
        color_continuous_scale='Reds',
        text_auto='.1f',
        title=f'Taxa de Subregistro por Munic√≠pio - {df_plot["Ano"].iloc[0]}'
    )
    
    fig.update_layout(
        xaxis_title="",
        yaxis_title="Taxa de Subregistro (%)",
        coloraxis_showscale=False,
        height=500
    )
    
    # Ajustar orienta√ß√£o dos r√≥tulos do eixo x se houver muitos munic√≠pios
    if len(df_plot) > 8:
        fig.update_layout(xaxis_tickangle=-45)
    
    return fig

# Fun√ß√£o para criar um gr√°fico de dispers√£o relacionando popula√ß√£o e taxa de subregistro
def grafico_dispersao_populacao_subregistro(df_municipios, ano_selecionado=None):
    if ano_selecionado:
        df_plot = df_municipios[df_municipios['Ano'] == ano_selecionado].copy()
    else:
        # Se n√£o tiver o ano selecionado, usa o ano mais recente
        ano_max = df_municipios['Ano'].max()
        df_plot = df_municipios[df_municipios['Ano'] == ano_max].copy()
    
    # Identificar a coluna de popula√ß√£o
    col_populacao = [col for col in df_plot.columns if 'popul' in col.lower()]
    if not col_populacao:
        # Se n√£o encontrar coluna espec√≠fica, assumir que a coluna 'Popula√ß√£o' existe
        col_populacao = 'Popula√ß√£o'
    else:
        col_populacao = col_populacao[0]
    
    # Criar o gr√°fico
    fig = px.scatter(
        df_plot,
        x=col_populacao,
        y='Taxa_Subregistro',
        size='Taxa_Subregistro',
        color='Taxa_Subregistro',
        hover_name='Munic√≠pio',
        color_continuous_scale='Reds',
        title=f'Rela√ß√£o entre Popula√ß√£o e Taxa de Subregistro - {df_plot["Ano"].iloc[0]}'
    )
    
    fig.update_layout(
        xaxis_title="Popula√ß√£o",
        yaxis_title="Taxa de Subregistro (%)",
        height=500
    )
    
    # Usar escala logar√≠tmica para popula√ß√£o se houver grande varia√ß√£o
    if df_plot[col_populacao].max() / df_plot[col_populacao].min() > 100:
        fig.update_xaxes(type='log')
    
    return fig

# Fun√ß√£o para criar um gr√°fico de evolu√ß√£o hist√≥rica da taxa de subregistro
def grafico_evolucao_historica(df, coluna_regiao='Regi√£o', coluna_ano='Ano', regioes_selecionadas=None):
    # Identificar regi√µes dispon√≠veis
    regioes_disponiveis = df[coluna_regiao].unique()
    
    # Filtrar regi√µes selecionadas, se houver
    if regioes_selecionadas:
        regioes_plot = [r for r in regioes_selecionadas if r in regioes_disponiveis]
    else:
        # Priorizar Brasil e Maranh√£o se dispon√≠veis
        regioes_plot = []
        if 'Brasil' in regioes_disponiveis:
            regioes_plot.append('Brasil')
        if 'Maranh√£o' in regioes_disponiveis:
            regioes_plot.append('Maranh√£o')
        if 'Nordeste' in regioes_disponiveis and 'Nordeste' not in regioes_plot:
            regioes_plot.append('Nordeste')
    
    # Se n√£o houver regi√µes para plotar, usar as duas primeiras dispon√≠veis
    if not regioes_plot and len(regioes_disponiveis) > 0:
        regioes_plot = list(regioes_disponiveis[:min(2, len(regioes_disponiveis))])
    
    # Filtrar o dataframe
    df_plot = df[df[coluna_regiao].isin(regioes_plot)]
    
    # Criar o gr√°fico
    fig = px.line(
        df_plot,
        x=coluna_ano,
        y='Taxa_Subregistro',
        color=coluna_regiao,
        markers=True,
        title='Evolu√ß√£o Hist√≥rica da Taxa de Subregistro'
    )
    
    fig.update_layout(
        xaxis_title="Ano",
        yaxis_title="Taxa de Subregistro (%)",
        height=500
    )
    
    return fig

# Fun√ß√£o para criar um gr√°fico de evolu√ß√£o hist√≥rica para um munic√≠pio espec√≠fico
def grafico_evolucao_municipio(df_municipios, municipio, coluna_ano='Ano'):
    # Filtrar dados do munic√≠pio
    df_plot = df_municipios[df_municipios['Munic√≠pio'] == municipio].copy()
    
    # Ordenar por ano
    df_plot = df_plot.sort_values(coluna_ano)
    
    # Criar o gr√°fico
    fig = px.line(
        df_plot,
        x=coluna_ano,
        y='Taxa_Subregistro',
        markers=True,
        title=f'Evolu√ß√£o da Taxa de Subregistro em {municipio}'
    )
    
    fig.update_layout(
        xaxis_title="Ano",
        yaxis_title="Taxa de Subregistro (%)",
        height=500
    )
    
    # Adicionar anota√ß√µes com os valores em cada ponto
    for i, row in df_plot.iterrows():
        fig.add_annotation(
            x=row[coluna_ano],
            y=row['Taxa_Subregistro'],
            text=f"{row['Taxa_Subregistro']:.1f}%",
            showarrow=False,
            yshift=10
        )
    
    return fig

# Fun√ß√£o para criar um gr√°fico de compara√ß√£o entre munic√≠pio e m√©dia estadual
def grafico_comparacao_municipio_estado(df_municipios, df_regioes, municipio, coluna_ano='Ano'):
    # Filtrar dados do munic√≠pio
    df_municipio = df_municipios[df_municipios['Munic√≠pio'] == municipio].copy()
    
    # Filtrar dados do estado (Maranh√£o)
    df_estado = df_regioes[df_regioes['Regi√£o'] == 'Maranh√£o'].copy()
    
    # Verificar anos dispon√≠veis em ambos os dataframes
    anos_municipio = set(df_municipio[coluna_ano])
    anos_estado = set(df_estado[coluna_ano])
    anos_comuns = list(anos_municipio.intersection(anos_estado))
    
    # Filtrar por anos comuns
    df_municipio = df_municipio[df_municipio[coluna_ano].isin(anos_comuns)]
    df_estado = df_estado[df_estado[coluna_ano].isin(anos_comuns)]
    
    # Ordenar por ano
    df_municipio = df_municipio.sort_values(coluna_ano)
    df_estado = df_estado.sort_values(coluna_ano)
    
    # Criar o gr√°fico
    fig = go.Figure()
    
    # Adicionar linha para o munic√≠pio
    fig.add_trace(go.Scatter(
        x=df_municipio[coluna_ano],
        y=df_municipio['Taxa_Subregistro'],
        mode='lines+markers',
        name=municipio,
        line=dict(color='#1a237e', width=3)
    ))
    
    # Adicionar linha para o estado
    fig.add_trace(go.Scatter(
        x=df_estado[coluna_ano],
        y=df_estado['Taxa_Subregistro'],
        mode='lines+markers',
        name='M√©dia do Maranh√£o',
        line=dict(color='#d32f2f', width=3, dash='dash')
    ))
    
    fig.update_layout(
        title=f'Compara√ß√£o entre {municipio} e M√©dia Estadual',
        xaxis_title="Ano",
        yaxis_title="Taxa de Subregistro (%)",
        height=500,
        legend=dict(
            orientation="h",
            yanchor="bottom",
            y=1.02,
            xanchor="right",
            x=1
        )
    )
    
    return fig

# Fun√ß√£o principal do app
def main():
    # T√≠tulo e descri√ß√£o
    st.title("üìä Dashboard de An√°lise de Subregistro Civil - COGEX-MA")
    st.markdown("""
    Este dashboard analisa os dados de subregistro civil no Maranh√£o, comparando com m√©dias regionais e nacionais.
    Utilize os filtros √† esquerda para personalizar a visualiza√ß√£o.
    """)
    
    # Carregar dados
    df_municipios, df_regioes = carregar_dados()
    
    # Processar dados
    df_municipios, df_regioes = processar_dados(df_municipios, df_regioes)
    
    # Sidebar com filtros
    st.sidebar.title("Filtros")
    
    # Obter anos dispon√≠veis nos dados
    if 'Ano' in df_municipios.columns:
        anos_disponiveis = sorted(df_municipios['Ano'].unique(), reverse=True)
        ano_selecionado = st.sidebar.selectbox(
            "Selecione o ano:",
            anos_disponiveis
        )
    else:
        st.sidebar.warning("Coluna 'Ano' n√£o encontrada nos dados. Usando dados sem filtro de ano.")
        ano_selecionado = None
    
    # Obter munic√≠pios dispon√≠veis
    municipios_disponiveis = sorted(df_municipios['Munic√≠pio'].unique())
    
    # Filtro de munic√≠pio para an√°lise detalhada
    municipio_detalhado = st.sidebar.selectbox(
        "Selecione um munic√≠pio para an√°lise detalhada:",
        ['Todos os Munic√≠pios'] + municipios_disponiveis
    )
    
    # Filtro para sele√ß√£o m√∫ltipla de munic√≠pios
    municipios_selecionados = st.sidebar.multiselect(
        "Selecione munic√≠pios para compara√ß√£o (opcional):",
        municipios_disponiveis
    )
    
    # Filtro para sele√ß√£o de regi√µes na evolu√ß√£o hist√≥rica
    if 'Regi√£o' in df_regioes.columns:
        regioes_disponiveis = sorted(df_regioes['Regi√£o'].unique())
        regioes_selecionadas = st.sidebar.multiselect(
            "Selecione regi√µes para evolu√ß√£o hist√≥rica:",
            regioes_disponiveis,
            default=['Brasil', 'Maranh√£o'] if 'Brasil' in regioes_disponiveis and 'Maranh√£o' in regioes_disponiveis else []
        )
    else:
        regioes_selecionadas = []
    
    # Op√ß√µes de visualiza√ß√£o
    st.sidebar.title("Op√ß√µes de Visualiza√ß√£o")
    mostrar_unidades_interligadas = st.sidebar.checkbox("Mostrar informa√ß√µes sobre unidades interligadas", value=True)
    mostrar_info_cogex = st.sidebar.checkbox("Mostrar informa√ß√µes sobre COGEX", value=True)
    
    # Bot√£o para exportar dados
    st.sidebar.title("Exportar Dados")
    st.sidebar.markdown(exportar_csv(df_municipios), unsafe_allow_html=True)
    
    # Dividir o layout em abas
    tab1, tab2, tab3 = st.tabs(["Panorama Geral", "An√°lise por Munic√≠pio", "S√©ries Hist√≥ricas"])
    
    with tab1:
        # M√©tricas principais
        col1, col2, col3, col4 = st.columns(4)
        
        # M√©trica 1: Taxa de Subregistro (MA)
        with col1:
            try:
                # Obter dados do Maranh√£o e Brasil para o ano selecionado
                if ano_selecionado:
                    taxa_ma = df_regioes[(df_regioes['Regi√£o'] == 'Maranh√£o') & (df_regioes['Ano'] == ano_selecionado)]['Taxa_Subregistro'].values[0]
                    taxa_br = df_regioes[(df_regioes['Regi√£o'] == 'Brasil') & (df_regioes['Ano'] == ano_selecionado)]['Taxa_Subregistro'].values[0]
                else:
                    # Se n√£o houver ano selecionado, usar o ano mais recente
                    ano_max = df_regioes['Ano'].max()
                    taxa_ma = df_regioes[(df_regioes['Regi√£o'] == 'Maranh√£o') & (df_regioes['Ano'] == ano_max)]['Taxa_Subregistro'].values[0]
                    taxa_br = df_regioes[(df_regioes['Regi√£o'] == 'Brasil') & (df_regioes['Ano'] == ano_max)]['Taxa_Subregistro'].values[0]
                
                # Calcular diferen√ßa
                diff = taxa_ma - taxa_br
                
                # Exibir m√©trica
                st.metric(
                    "Taxa de Subregistro (MA)",
                    f"{taxa_ma:.1f}%",
                    f"{diff:+.1f}% vs Brasil"
                )
            except:
                st.metric("Taxa de Subregistro (MA)", "N/A")
        
        # M√©trica 2: Nascidos Vivos (MA)
        with col2:
            try:
                # Identificar coluna de nascidos vivos
                col_nascidos = [col for col in df_regioes.columns if 'nasc' in col.lower() or 'vivo' in col.lower()]
                if col_nascidos:
                    col_nascidos = col_nascidos[0]
                    
                    # Obter dados do Maranh√£o para o ano selecionado
                    if ano_selecionado:
                        nascidos_ma = df_regioes[(df_regioes['Regi√£o'] == 'Maranh√£o') & (df_regioes['Ano'] == ano_selecionado)][col_nascidos].values[0]
                    else:
                        # Se n√£o houver ano selecionado, usar o ano mais recente
                        ano_max = df_regioes['Ano'].max()
                        nascidos_ma = df_regioes[(df_regioes['Regi√£o'] == 'Maranh√£o') & (df_regioes['Ano'] == ano_max)][col_nascidos].values[0]
                    
                    # Exibir m√©trica
                    st.metric("Nascidos Vivos (MA)", f"{int(nascidos_ma):,}".replace(',', '.'))
                else:
                    st.metric("Nascidos Vivos (MA)", "N/A")
            except:
                st.metric("Nascidos Vivos (MA)", "N/A")
        
        # M√©trica 3: Registros Civis (MA)
        with col3:
            try:
                # Identificar coluna de registros civis
                col_registros = [col for col in df_regioes.columns if 'regis' in col.lower() or 'civil' in col.lower()]
                if col_registros:
                    col_registros = col_registros[0]
                    
                    # Obter dados do Maranh√£o para o ano selecionado
                    if ano_selecionado:
                        registros_ma = df_regioes[(df_regioes['Regi√£o'] == 'Maranh√£o') & (df_regioes['Ano'] == ano_selecionado)][col_registros].values[0]
                    else:
                        # Se n√£o houver ano selecionado, usar o ano mais recente
                        ano_max = df_regioes['Ano'].max()
                        registros_ma = df_regioes[(df_regioes['Regi√£o'] == 'Maranh√£o') & (df_regioes['Ano'] == ano_max)][col_registros].values[0]
                    
                    # Exibir m√©trica
                    st.metric("Registros Civis (MA)", f"{int(registros_ma):,}".replace(',', '.'))
                else:
                    st.metric("Registros Civis (MA)", "N/A")
            except:
                st.metric("Registros Civis (MA)", "N/A")
        
        # M√©trica 4: Unidades Interligadas
        with col4:
            if mostrar_unidades_interligadas:
                st.metric("Unidades Interligadas", "125")
        
        # Gr√°fico de taxa de subregistro por regi√£o
        st.subheader("Comparativo de Taxa de Subregistro por Regi√£o")
        fig_regioes = grafico_subregistro_regiao(df_regioes, ano_selecionado)
        st.plotly_chart(fig_regioes, use_container_width=True)
        
        # Gr√°fico de taxa de subregistro por munic√≠pio (top 15)
        st.subheader(f"Distribui√ß√£o do Subregistro nos Munic√≠pios do Maranh√£o")
        fig_municipios = grafico_subregistro_municipio(df_municipios, ano_selecionado)
        st.plotly_chart(fig_municipios, use_container_width=True)
        
        # Gr√°fico de dispers√£o: popula√ß√£o vs taxa de subregistro
        st.subheader("Rela√ß√£o entre Popula√ß√£o e Taxa de Subregistro")
        fig_dispersao = grafico_dispersao_populacao_subregistro(df_municipios, ano_selecionado)
        st.plotly_chart(fig_dispersao, use_container_width=True)
        
        # Alerta sobre riscos de subregistro
        st.warning("""
        ### Alerta de Subregistro
        
        A partir de janeiro/2025, o ON-RCPN adotou entendimento pelo qual apenas delegat√°rios, interinos ou prepostos 
        de serventias extrajudiciais podem emitir certid√µes, afetando o acesso nas maternidades e criando risco de 
        aumento do subregistro.
        """)
    
    with tab2:
        if municipio_detalhado != 'Todos os Munic√≠pios':
            # An√°lise detalhada do munic√≠pio selecionado
            st.subheader(f"An√°lise Detalhada: {municipio_detalhado}")
            
            # M√©tricas do munic√≠pio
            col1, col2, col3 = st.columns(3)
            
            # M√©trica 1: Taxa de Subregistro
            with col1:
                try:
                    # Obter taxa de subregistro do munic√≠pio para o ano selecionado
                    if ano_selecionado:
                        taxa_mun = df_municipios[(df_municipios['Munic√≠pio'] == municipio_detalhado) & (df_municipios['Ano'] == ano_selecionado)]['Taxa_Subregistro'].values[0]
                    else:
                        # Se n√£o houver ano selecionado, usar o ano mais recente
                        ano_max = df_municipios['Ano'].max()
                        taxa_mun = df_municipios[(df_municipios['Munic√≠pio'] == municipio_detalhado) & (df_municipios['Ano'] == ano_max)]['Taxa_Subregistro'].values[0]
                    
                    # Exibir m√©trica
                    st.metric("Taxa de Subregistro", f"{taxa_mun:.1f}%")
                except:
                    st.metric("Taxa de Subregistro", "N/A")
            
            # M√©trica 2: Nascidos Vivos
            with col2:
                try:
                    # Identificar coluna de nascidos vivos
                    col_nascidos = [col for col in df_municipios.columns if 'nasc' in col.lower() or 'vivo' in col.lower()]
                    if col_nascidos:
                        col_nascidos = col_nascidos[0]
                        
                        # Obter dados do munic√≠pio para o ano selecionado
                        if ano_selecionado:
                            nascidos_mun = df_municipios[(df_municipios['Munic√≠pio'] == municipio_detalhado) & (df_municipios['Ano'] == ano_selecionado)][col_nascidos].values[0]
                        else:
                            # Se n√£o houver ano selecionado, usar o ano mais recente
                            ano_max = df_municipios['Ano'].max()
                            nascidos_mun = df_municipios[(df_municipios['Munic√≠pio'] == municipio_detalhado) & (df_municipios['Ano'] == ano_max)][col_nascidos].values[0]
                        
                        # Exibir m√©trica
                        st.metric("Nascidos Vivos", f"{int(nascidos_mun):,}".replace(',', '.'))
                    else:
                        st.metric("Nascidos Vivos", "N/A")
                except:
                    st.metric("Nascidos Vivos", "N/A")
            
            # M√©trica 3: Registros Civis
            with col3:
                try:
                    # Identificar coluna de registros civis
                    col_registros = [col for col in df_municipios.columns if 'regis' in col.lower() or 'civil' in col.lower()]
                    if col_registros:
                        col_registros = col_registros[0]
                        
                        # Obter dados do munic√≠pio para o ano selecionado
                        if ano_selecionado:
                            registros_mun = df_municipios[(df_municipios['Munic√≠pio'] == municipio_detalhado) & (df_municipios['Ano'] == ano_selecionado)][col_registros].values[0]
                        else:
                            # Se n√£o houver ano selecionado, usar o ano mais recente
                            ano_max = df_municipios['Ano'].max()
                            registros_mun = df_municipios[(df_municipios['Munic√≠pio'] == municipio_detalhado) & (df_municipios['Ano'] == ano_max)][col_registros].values[0]
                        
                        # Exibir m√©trica
                        st.metric("Registros Civis", f"{int(registros_mun):,}".replace(',', '.'))
                    else:
                        st.metric("Registros Civis", "N/A")
                except:
                    st.metric("Registros Civis", "N/A")
            
            # Gr√°fico de evolu√ß√£o da taxa de subregistro no munic√≠pio
            st.subheader(f"Evolu√ß√£o da Taxa de Subregistro em {municipio_detalhado}")
            fig_evolucao = grafico_evolucao_municipio(df_municipios, municipio_detalhado)
            st.plotly_chart(fig_evolucao, use_container_width=True)
            
            # Gr√°fico de compara√ß√£o com a m√©dia estadual
            st.subheader("Compara√ß√£o com a M√©dia Estadual")
            fig_comparacao = grafico_comparacao_municipio_estado(df_municipios, df_regioes, municipio_detalhado)
            st.plotly_chart(fig_comparacao, use_container_width=True)
            
        else:
            # Vis√£o geral de todos os munic√≠pios
            st.subheader("An√°lise de Todos os Munic√≠pios")
            
            # Tabela com dados de todos os munic√≠pios
            if ano_selecionado:
                df_tabela = df_municipios[df_municipios['Ano'] == ano_selecionado].copy()
            else:
                # Se n√£o houver ano selecionado, usar o ano mais recente
                ano_max = df_municipios['Ano'].max()
                df_tabela = df_municipios[df_municipios['Ano'] == ano_max].copy()
            
            # Selecionar colunas relevantes
            colunas_relevantes = ['Munic√≠pio', 'Taxa_Subregistro']
            
            # Adicionar colunas de nascidos vivos e registros civis, se existirem
            col_nascidos = [col for col in df_tabela.columns if 'nasc' in col.lower() or 'vivo' in col.lower()]
            col_registros = [col for col in df_tabela.columns if 'regis' in col.lower() or 'civil' in col.lower()]
            
            if col_nascidos:
                colunas_relevantes.append(col_nascidos[0])
            if col_registros:
                colunas_relevantes.append(col_registros[0])
            
            # Ordenar por taxa de subregistro decrescente
            df_tabela = df_tabela[colunas_relevantes].sort_values('Taxa_Subregistro', ascending=False)
            
            # Adicionar coluna de status
            df_tabela['Status'] = pd.cut(
                df_tabela['Taxa_Subregistro'],
                bins=[0, 3, 7, 100],
                labels=['Baixo', 'M√©dio', 'Alto']
            )
            
            # Exibir tabela
            st.dataframe(df_tabela, use_container_width=True)
            
            # Gr√°fico dos munic√≠pios com maior taxa de subregistro
            st.subheader("Top 5 Munic√≠pios com Maior Taxa de Subregistro")
            fig_top5 = grafico_subregistro_municipio(df_municipios, ano_selecionado, municipios_selecionados=df_tabela.head(5)['Munic√≠pio'].tolist())
            st.plotly_chart(fig_top5, use_container_width=True)
            
            # Gr√°fico de munic√≠pios selecionados, se houver
            if municipios_selecionados:
                st.subheader("Comparativo dos Munic√≠pios Selecionados")
                fig_selecionados = grafico_subregistro_municipio(df_municipios, ano_selecionado, municipios_selecionados=municipios_selecionados)
                st.plotly_chart(fig_selecionados, use_container_width=True)
    
    with tab3:
        # Evolu√ß√£o hist√≥rica da taxa de subregistro
        st.subheader("Evolu√ß√£o Hist√≥rica da Taxa de Subregistro")
        fig_historico = grafico_evolucao_historica(df_regioes, regioes_selecionadas=regioes_selecionadas)
        st.plotly_chart(fig_historico, use_container_width=True)
        
        # Informa√ß√µes adicionais sobre unidades interligadas
        if mostrar_unidades_interligadas:
            st.subheader("Unidades Interligadas em Hospitais")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("Total de Unidades Interligadas", "125")
                st.metric("Unidades com Problemas de Acesso", "119")
            
            with col2:
                st.metric("Unidades Operacionais", "119")
                st.metric("Risco de Aumento do Subregistro", "Alto")
            
            st.info("""
            ### Impacto das Unidades Interligadas
            
            As unidades interligadas s√£o essenciais para o registro civil de nascimento nas maternidades, 
            contribuindo significativamente para a redu√ß√£o do subregistro. A pol√≠tica recente do ON-RCPN 
            pode comprometer esse avan√ßo.
            """)
        
        # Informa√ß√µes sobre a COGEX
        if mostrar_info_cogex:
            st.subheader("Informa√ß√µes sobre a COGEX")
            
            st.markdown("""
            A Corregedoria Geral do Foro Extrajudicial (COGEX) foi criada pela Lei Complementar n.¬∫ 271, 
            de 25 de junho de 2024, com compet√™ncia para fiscalizar os servi√ßos extrajudiciais do Estado do Maranh√£o.
            
            **Principais desafios relacionados ao registro civil:**
            
            - Ressarcimentos n√£o integrais pelo FERC aos registradores civis
            - A partir de janeiro/2025, o ON-RCPN adotou entendimento pelo qual apenas delegat√°rios, interinos ou 
              prepostos podem emitir certid√µes em papel nas unidades interligadas
            - Risco de aumento do subregistro devido √† prefer√™ncia da popula√ß√£o por certid√µes em papel
            """)
            
            # Tabela de problemas e a√ß√µes
            st.markdown("### Principais A√ß√µes Recomendadas")
            
            acoes = pd.DataFrame({
                'Problema': [
                    'Ressarcimentos n√£o integrais pelo FERC',
                    'Limita√ß√£o na emiss√£o de certid√µes em unidades interligadas',
                    'Falta de capacita√ß√£o em LGPD e PLD/FT'
                ],
                'A√ß√£o Recomendada': [
                    'Regularizar fluxo de ressarcimentos e garantir pagamento integral aos registradores',
                    'Implementar campanha de conscientiza√ß√£o sobre validade da certid√£o digital',
                    'Estabelecer programa institucional de capacita√ß√£o'
                ],
                'Prazo': ['30 dias', '60 dias', '90 dias']
            })
            
            st.dataframe(acoes, use_container_width=True)

# Executar o aplicativo
if __name__ == "__main__":
    main()
